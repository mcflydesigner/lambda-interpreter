//lettype User = {name: String, phone: String} in (
//let f = /\u:User. {
//    print (u.name);
//} in f ({name="Max", phone="+7", country="Russia"});
//);

//lettype Vec2d = {x1:Real, x2:Real};
//lettype Vec3d = {x1:Real, x2:Real, x3:Real};

///\u:Unit. {
//    | (true): {x1=1.0, x2=0.0}
//    | (false): {x1=1.0, x2=0.0, x3=3.0}
//    |: {x1=0.0};
//} -> {};

//lettype NestedRecord = {x1:{a:Int, b:Int}, x2:Int, x3:Int};

//let x: NestedRecord = { x1 = {a = 1, b = 2} , x2 = 2 , x3 = 3 };
-| "std";

///\ n: Int. {
//    | ((n > 1) and (n < 5)): (
//        let x = (n + 5) * 10 in x*x;
//        print (n); // returns unit
//    )
//    | ((n >= 10) or (n < 0)): (n * 3) + 5 // returns int
//    |:  n * (n+1); //returns int
//};


lettype vec2d = {x1:Int, x2:Int};
lettype vec3d = {x1:Int, x2:Int, x3:Int};

lettype func = vec2d -> vec3d;
lettype subfunc = vec3d -> vec3d;

let switch2d: subfunc = /\ v2:vec2d. {
    {x1=v3.x2, x2=v3.x1, x3=v3.x3};
} -> vec3d;


// {x1:Int, x2:Int} -> {x1:Int, x2:Int, x3:Int}
/\ f:func. {
    let v2:vec2d = {x1=1, x2=2} in f (v2);
} (switch2d);