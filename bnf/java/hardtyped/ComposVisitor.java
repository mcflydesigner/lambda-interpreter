// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  hardtyped.Absyn.Program.Visitor<hardtyped.Absyn.Program,A>,
  hardtyped.Absyn.Stm.Visitor<hardtyped.Absyn.Stm,A>,
  hardtyped.Absyn.IfStart.Visitor<hardtyped.Absyn.IfStart,A>,
  hardtyped.Absyn.Else.Visitor<hardtyped.Absyn.Else,A>,
  hardtyped.Absyn.Body.Visitor<hardtyped.Absyn.Body,A>,
  hardtyped.Absyn.Expression.Visitor<hardtyped.Absyn.Expression,A>,
  hardtyped.Absyn.Conjunction.Visitor<hardtyped.Absyn.Conjunction,A>,
  hardtyped.Absyn.Relation.Visitor<hardtyped.Absyn.Relation,A>,
  hardtyped.Absyn.Factor.Visitor<hardtyped.Absyn.Factor,A>,
  hardtyped.Absyn.Term.Visitor<hardtyped.Absyn.Term,A>,
  hardtyped.Absyn.Unary.Visitor<hardtyped.Absyn.Unary,A>,
  hardtyped.Absyn.Ascription.Visitor<hardtyped.Absyn.Ascription,A>,
  hardtyped.Absyn.Literal.Visitor<hardtyped.Absyn.Literal,A>,
  hardtyped.Absyn.RecordElement.Visitor<hardtyped.Absyn.RecordElement,A>,
  hardtyped.Absyn.FunctionParameters.Visitor<hardtyped.Absyn.FunctionParameters,A>,
  hardtyped.Absyn.FunctionBody.Visitor<hardtyped.Absyn.FunctionBody,A>,
  hardtyped.Absyn.Identifier.Visitor<hardtyped.Absyn.Identifier,A>,
  hardtyped.Absyn.Type.Visitor<hardtyped.Absyn.Type,A>,
  hardtyped.Absyn.Operand.Visitor<hardtyped.Absyn.Operand,A>,
  hardtyped.Absyn.PlusMinus.Visitor<hardtyped.Absyn.PlusMinus,A>,
  hardtyped.Absyn.MultDiv.Visitor<hardtyped.Absyn.MultDiv,A>,
  hardtyped.Absyn.UnaryPrefix.Visitor<hardtyped.Absyn.UnaryPrefix,A>
{
    /* Program */
    public hardtyped.Absyn.Program visit(hardtyped.Absyn.Progr p, A arg)
    {
      hardtyped.Absyn.Stm stm_ = p.stm_.accept(this, arg);
      return new hardtyped.Absyn.Progr(stm_);
    }

    /* Stm */
    public hardtyped.Absyn.Stm visit(hardtyped.Absyn.ImportAs p, A arg)
    {
      hardtyped.Absyn.Identifier identifier_1 = p.identifier_1.accept(this, arg);
      hardtyped.Absyn.Identifier identifier_2 = p.identifier_2.accept(this, arg);
      return new hardtyped.Absyn.ImportAs(identifier_1, identifier_2);
    }
    public hardtyped.Absyn.Stm visit(hardtyped.Absyn.ImportPlain p, A arg)
    {
      hardtyped.Absyn.Identifier identifier_ = p.identifier_.accept(this, arg);
      return new hardtyped.Absyn.ImportPlain(identifier_);
    }
    public hardtyped.Absyn.Stm visit(hardtyped.Absyn.If p, A arg)
    {
      hardtyped.Absyn.IfStart ifstart_ = p.ifstart_.accept(this, arg);
      hardtyped.Absyn.Else else_ = p.else_.accept(this, arg);
      return new hardtyped.Absyn.If(ifstart_, else_);
    }
    public hardtyped.Absyn.Stm visit(hardtyped.Absyn.Let p, A arg)
    {
      hardtyped.Absyn.Identifier identifier_ = p.identifier_.accept(this, arg);
      hardtyped.Absyn.Type type_ = p.type_.accept(this, arg);
      hardtyped.Absyn.Expression expression_1 = p.expression_1.accept(this, arg);
      hardtyped.Absyn.Expression expression_2 = p.expression_2.accept(this, arg);
      return new hardtyped.Absyn.Let(identifier_, type_, expression_1, expression_2);
    }
    public hardtyped.Absyn.Stm visit(hardtyped.Absyn.Letrec p, A arg)
    {
      hardtyped.Absyn.Identifier identifier_ = p.identifier_.accept(this, arg);
      hardtyped.Absyn.Type type_ = p.type_.accept(this, arg);
      return new hardtyped.Absyn.Letrec(identifier_, type_);
    }

    /* IfStart */
    public hardtyped.Absyn.IfStart visit(hardtyped.Absyn.IfStart1 p, A arg)
    {
      hardtyped.Absyn.Expression expression_ = p.expression_.accept(this, arg);
      hardtyped.Absyn.Body body_ = p.body_.accept(this, arg);
      return new hardtyped.Absyn.IfStart1(expression_, body_);
    }

    /* Else */
    public hardtyped.Absyn.Else visit(hardtyped.Absyn.Else1 p, A arg)
    {
      hardtyped.Absyn.Body body_ = p.body_.accept(this, arg);
      return new hardtyped.Absyn.Else1(body_);
    }

    /* Body */
    public hardtyped.Absyn.Body visit(hardtyped.Absyn.Body1 p, A arg)
    {
      hardtyped.Absyn.Expression expression_ = p.expression_.accept(this, arg);
      return new hardtyped.Absyn.Body1(expression_);
    }

    /* Expression */
    public hardtyped.Absyn.Expression visit(hardtyped.Absyn.Expression1 p, A arg)
    {
      hardtyped.Absyn.Conjunction conjunction_ = p.conjunction_.accept(this, arg);
      return new hardtyped.Absyn.Expression1(conjunction_);
    }
    public hardtyped.Absyn.Expression visit(hardtyped.Absyn.Expression2 p, A arg)
    {
      hardtyped.Absyn.Conjunction conjunction_ = p.conjunction_.accept(this, arg);
      return new hardtyped.Absyn.Expression2(conjunction_);
    }

    /* Conjunction */
    public hardtyped.Absyn.Conjunction visit(hardtyped.Absyn.Conjunction1 p, A arg)
    {
      hardtyped.Absyn.Relation relation_1 = p.relation_1.accept(this, arg);
      hardtyped.Absyn.Relation relation_2 = p.relation_2.accept(this, arg);
      return new hardtyped.Absyn.Conjunction1(relation_1, relation_2);
    }

    /* Relation */
    public hardtyped.Absyn.Relation visit(hardtyped.Absyn.Relation1 p, A arg)
    {
      hardtyped.Absyn.Factor factor_ = p.factor_.accept(this, arg);
      return new hardtyped.Absyn.Relation1(factor_);
    }
    public hardtyped.Absyn.Relation visit(hardtyped.Absyn.Relation2 p, A arg)
    {
      hardtyped.Absyn.Factor factor_1 = p.factor_1.accept(this, arg);
      hardtyped.Absyn.Operand operand_ = p.operand_.accept(this, arg);
      hardtyped.Absyn.Factor factor_2 = p.factor_2.accept(this, arg);
      return new hardtyped.Absyn.Relation2(factor_1, operand_, factor_2);
    }

    /* Factor */
    public hardtyped.Absyn.Factor visit(hardtyped.Absyn.Factor1 p, A arg)
    {
      hardtyped.Absyn.Term term_ = p.term_.accept(this, arg);
      return new hardtyped.Absyn.Factor1(term_);
    }
    public hardtyped.Absyn.Factor visit(hardtyped.Absyn.Factor2 p, A arg)
    {
      hardtyped.Absyn.Term term_1 = p.term_1.accept(this, arg);
      hardtyped.Absyn.PlusMinus plusminus_ = p.plusminus_.accept(this, arg);
      hardtyped.Absyn.Term term_2 = p.term_2.accept(this, arg);
      return new hardtyped.Absyn.Factor2(term_1, plusminus_, term_2);
    }

    /* Term */
    public hardtyped.Absyn.Term visit(hardtyped.Absyn.Term1 p, A arg)
    {
      hardtyped.Absyn.Unary unary_ = p.unary_.accept(this, arg);
      return new hardtyped.Absyn.Term1(unary_);
    }
    public hardtyped.Absyn.Term visit(hardtyped.Absyn.Term2 p, A arg)
    {
      hardtyped.Absyn.Unary unary_1 = p.unary_1.accept(this, arg);
      hardtyped.Absyn.MultDiv multdiv_ = p.multdiv_.accept(this, arg);
      hardtyped.Absyn.Unary unary_2 = p.unary_2.accept(this, arg);
      return new hardtyped.Absyn.Term2(unary_1, multdiv_, unary_2);
    }

    /* Unary */
    public hardtyped.Absyn.Unary visit(hardtyped.Absyn.Unary1 p, A arg)
    {
      hardtyped.Absyn.Expression expression_ = p.expression_.accept(this, arg);
      return new hardtyped.Absyn.Unary1(expression_);
    }
    public hardtyped.Absyn.Unary visit(hardtyped.Absyn.Unary2 p, A arg)
    {
      hardtyped.Absyn.Literal literal_ = p.literal_.accept(this, arg);
      return new hardtyped.Absyn.Unary2(literal_);
    }
    public hardtyped.Absyn.Unary visit(hardtyped.Absyn.Unary3 p, A arg)
    {
      hardtyped.Absyn.UnaryPrefix unaryprefix_ = p.unaryprefix_.accept(this, arg);
      hardtyped.Absyn.Identifier identifier_ = p.identifier_.accept(this, arg);
      hardtyped.Absyn.Ascription ascription_ = p.ascription_.accept(this, arg);
      return new hardtyped.Absyn.Unary3(unaryprefix_, identifier_, ascription_);
    }

    /* Ascription */
    public hardtyped.Absyn.Ascription visit(hardtyped.Absyn.Ascription1 p, A arg)
    {
      hardtyped.Absyn.Type type_ = p.type_.accept(this, arg);
      return new hardtyped.Absyn.Ascription1(type_);
    }

    /* Literal */
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.ArrayLiteral p, A arg)
    {
      hardtyped.Absyn.Expression expression_ = p.expression_.accept(this, arg);
      return new hardtyped.Absyn.ArrayLiteral(expression_);
    }
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.FunctionLiteral p, A arg)
    {
      hardtyped.Absyn.FunctionParameters functionparameters_ = p.functionparameters_.accept(this, arg);
      hardtyped.Absyn.FunctionBody functionbody_ = p.functionbody_.accept(this, arg);
      return new hardtyped.Absyn.FunctionLiteral(functionparameters_, functionbody_);
    }
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.RecordLiteral p, A arg)
    {
      hardtyped.Absyn.RecordElement recordelement_ = p.recordelement_.accept(this, arg);
      return new hardtyped.Absyn.RecordLiteral(recordelement_);
    }

    /* RecordElement */
    public hardtyped.Absyn.RecordElement visit(hardtyped.Absyn.RecordElement1 p, A arg)
    {
      hardtyped.Absyn.Identifier identifier_ = p.identifier_.accept(this, arg);
      hardtyped.Absyn.Expression expression_ = p.expression_.accept(this, arg);
      return new hardtyped.Absyn.RecordElement1(identifier_, expression_);
    }

    /* FunctionParameters */
    public hardtyped.Absyn.FunctionParameters visit(hardtyped.Absyn.FunctionParameters1 p, A arg)
    {
      hardtyped.Absyn.Identifier identifier_ = p.identifier_.accept(this, arg);
      hardtyped.Absyn.Type type_ = p.type_.accept(this, arg);
      return new hardtyped.Absyn.FunctionParameters1(identifier_, type_);
    }

    /* FunctionBody */
    public hardtyped.Absyn.FunctionBody visit(hardtyped.Absyn.FunctionBody1 p, A arg)
    {
      hardtyped.Absyn.Body body_ = p.body_.accept(this, arg);
      return new hardtyped.Absyn.FunctionBody1(body_);
    }

    /* Identifier */
    public hardtyped.Absyn.Identifier visit(hardtyped.Absyn.Identifier1 p, A arg)
    {
      String string_ = p.string_;
      return new hardtyped.Absyn.Identifier1(string_);
    }

    /* Type */
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Int p, A arg)
    {
      return new hardtyped.Absyn.Int();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Real p, A arg)
    {
      return new hardtyped.Absyn.Real();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.String p, A arg)
    {
      return new hardtyped.Absyn.String();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Boolean p, A arg)
    {
      return new hardtyped.Absyn.Boolean();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Unit p, A arg)
    {
      return new hardtyped.Absyn.Unit();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.FunctionTypeIndicator p, A arg)
    {
      hardtyped.Absyn.Type type_1 = p.type_1.accept(this, arg);
      hardtyped.Absyn.Type type_2 = p.type_2.accept(this, arg);
      return new hardtyped.Absyn.FunctionTypeIndicator(type_1, type_2);
    }

    /* Operand */
    public hardtyped.Absyn.Operand visit(hardtyped.Absyn.Less p, A arg)
    {
      return new hardtyped.Absyn.Less();
    }
    public hardtyped.Absyn.Operand visit(hardtyped.Absyn.LessEql p, A arg)
    {
      return new hardtyped.Absyn.LessEql();
    }
    public hardtyped.Absyn.Operand visit(hardtyped.Absyn.More p, A arg)
    {
      return new hardtyped.Absyn.More();
    }
    public hardtyped.Absyn.Operand visit(hardtyped.Absyn.MoreEql p, A arg)
    {
      return new hardtyped.Absyn.MoreEql();
    }
    public hardtyped.Absyn.Operand visit(hardtyped.Absyn.Eql p, A arg)
    {
      return new hardtyped.Absyn.Eql();
    }
    public hardtyped.Absyn.Operand visit(hardtyped.Absyn.NotEql p, A arg)
    {
      return new hardtyped.Absyn.NotEql();
    }

    /* PlusMinus */
    public hardtyped.Absyn.PlusMinus visit(hardtyped.Absyn.Plus p, A arg)
    {
      return new hardtyped.Absyn.Plus();
    }
    public hardtyped.Absyn.PlusMinus visit(hardtyped.Absyn.Minus p, A arg)
    {
      return new hardtyped.Absyn.Minus();
    }

    /* MultDiv */
    public hardtyped.Absyn.MultDiv visit(hardtyped.Absyn.Mult p, A arg)
    {
      return new hardtyped.Absyn.Mult();
    }
    public hardtyped.Absyn.MultDiv visit(hardtyped.Absyn.Div p, A arg)
    {
      return new hardtyped.Absyn.Div();
    }

    /* UnaryPrefix */
    public hardtyped.Absyn.UnaryPrefix visit(hardtyped.Absyn.PlusPfx p, A arg)
    {
      return new hardtyped.Absyn.PlusPfx();
    }
    public hardtyped.Absyn.UnaryPrefix visit(hardtyped.Absyn.MinusPfx p, A arg)
    {
      return new hardtyped.Absyn.MinusPfx();
    }
    public hardtyped.Absyn.UnaryPrefix visit(hardtyped.Absyn.NotPfx p, A arg)
    {
      return new hardtyped.Absyn.NotPfx();
    }
}
