
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package hardtyped;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\004\000\002\003\004\000\002\003\012" +
    "\000\002\003\006\000\002\004\006\000\002\005\004\000" +
    "\002\006\003\000\002\007\003\000\002\007\005\000\002" +
    "\010\004\000\002\011\003\000\002\011\005\000\002\012" +
    "\003\000\002\012\005\000\002\013\003\000\002\013\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\005\000" +
    "\002\015\004\000\002\016\005\000\002\016\006\000\002" +
    "\016\005\000\002\017\005\000\002\020\005\000\002\021" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\005\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\012\004\010\005\006\040\011\041\007\001" +
    "\002\000\004\002\132\001\002\000\004\007\127\001\002" +
    "\000\016\011\032\013\030\015\044\025\036\026\034\042" +
    "\031\001\002\000\004\045\013\001\002\000\004\045\013" +
    "\001\002\000\004\045\013\001\002\000\004\002\000\001" +
    "\002\000\012\002\uffe4\006\uffe4\010\uffe4\036\uffe4\001\002" +
    "\000\004\006\015\001\002\000\014\031\017\032\016\033" +
    "\023\034\022\035\021\001\002\000\056\002\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\037\uffe3\042" +
    "\uffe3\001\002\000\056\002\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\037\uffe0\042\uffe0\001\002\000" +
    "\006\010\024\017\025\001\002\000\056\002\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\037\uffdf\042" +
    "\uffdf\001\002\000\056\002\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\037\uffe1\042\uffe1\001\002\000" +
    "\056\002\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\037\uffe2\042\uffe2\001\002\000\016\011\032\013" +
    "\030\015\044\025\036\026\034\042\031\001\002\000\014" +
    "\031\017\032\016\033\023\034\022\035\021\001\002\000" +
    "\056\002\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\025\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\037\uffde\042\uffde\001\002\000\052\002\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\112\030\113\037\ufff0\042\ufff0\001\002" +
    "\000\016\011\032\013\030\015\044\025\036\026\034\042" +
    "\031\001\002\000\004\045\uffd1\001\002\000\020\011\032" +
    "\013\030\015\044\025\036\026\034\042\031\045\013\001" +
    "\002\000\052\002\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\037\uffed\042\uffed\001\002\000\004\045\uffd2\001\002\000" +
    "\040\010\uffee\011\uffee\013\uffee\015\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\037\077\042\uffee\001\002\000\004\045\uffd3\001\002" +
    "\000\052\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\037" +
    "\ufff7\042\ufff7\001\002\000\052\002\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\075\026\073" +
    "\027\ufff2\030\ufff2\037\ufff2\042\ufff2\001\002\000\004\045" +
    "\013\001\002\000\052\002\ufff4\006\ufff4\007\ufff4\010\057" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\064\021" +
    "\063\022\062\023\061\024\060\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\037\ufff4\042\ufff4\001\002\000\016\011\032\013" +
    "\030\015\044\025\036\026\034\042\031\001\002\000\004" +
    "\045\013\001\002\000\004\016\051\001\002\000\004\006" +
    "\047\001\002\000\014\031\017\032\016\033\023\034\022" +
    "\035\021\001\002\000\006\016\uffe6\017\025\001\002\000" +
    "\016\011\032\013\030\015\044\025\036\026\034\042\031" +
    "\001\002\000\052\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\037\ufff8\042\ufff8\001\002\000\052\002\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\037\uffe9\042\uffe9\001\002\000" +
    "\052\002\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\037\uffe5" +
    "\042\uffe5\001\002\000\052\002\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\037\uffee\042\uffee\001\002\000\052\002\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\032\012\ufff5\013\030\014" +
    "\ufff5\015\044\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\036\026\034\027\ufff5\030\ufff5\037\ufff5\042\031\001" +
    "\002\000\016\011\uffd9\013\uffd9\015\uffd9\025\uffd9\026\uffd9" +
    "\042\uffd9\001\002\000\016\011\uffd8\013\uffd8\015\uffd8\025" +
    "\uffd8\026\uffd8\042\uffd8\001\002\000\016\011\uffda\013\uffda" +
    "\015\uffda\025\uffda\026\uffda\042\uffda\001\002\000\016\011" +
    "\uffdb\013\uffdb\015\uffdb\025\uffdb\026\uffdb\042\uffdb\001\002" +
    "\000\016\011\uffdc\013\uffdc\015\uffdc\025\uffdc\026\uffdc\042" +
    "\uffdc\001\002\000\016\011\uffdd\013\uffdd\015\uffdd\025\uffdd" +
    "\026\uffdd\042\uffdd\001\002\000\016\011\032\013\030\015" +
    "\044\025\036\026\034\042\031\001\002\000\052\002\ufff3" +
    "\006\ufff3\007\ufff3\010\057\011\ufff4\012\ufff3\013\ufff4\014" +
    "\ufff3\015\ufff4\020\064\021\063\022\062\023\061\024\060" +
    "\025\ufff4\026\ufff4\027\ufff3\030\ufff3\037\ufff3\042\ufff4\001" +
    "\002\000\004\036\070\001\002\000\014\031\017\032\016" +
    "\033\023\034\022\035\021\001\002\000\052\002\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\037\uffec\042\uffec\001\002" +
    "\000\054\002\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\017\025\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\037\uffeb\042\uffeb\001\002\000\016\011\uffd6\013\uffd6" +
    "\015\uffd6\025\uffd6\026\uffd6\042\uffd6\001\002\000\016\011" +
    "\032\013\030\015\044\025\036\026\034\042\031\001\002" +
    "\000\016\011\uffd7\013\uffd7\015\uffd7\025\uffd7\026\uffd7\042" +
    "\uffd7\001\002\000\052\002\ufff1\006\ufff1\007\ufff1\010\ufff2" +
    "\011\ufff2\012\ufff1\013\ufff2\014\ufff1\015\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\075\026\073\027\ufff1" +
    "\030\ufff1\037\ufff1\042\ufff2\001\002\000\016\011\032\013" +
    "\030\015\044\025\036\026\034\042\031\001\002\000\040" +
    "\002\ufffc\010\uffee\011\uffee\013\uffee\015\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\042\uffee\001\002\000\004\010\106\001\002\000" +
    "\040\010\ufff7\011\ufff7\012\105\013\ufff7\015\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\042\ufff7\001\002\000\004\012\104\001\002" +
    "\000\052\002\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\037" +
    "\uffe8\042\uffe8\001\002\000\052\002\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\037\ufff6\042\ufff6\001\002\000\016\011" +
    "\032\013\030\015\044\025\036\026\034\042\031\001\002" +
    "\000\040\010\uffee\011\uffee\012\uffe7\013\uffee\015\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\042\uffee\001\002\000\040\010\uffee\011" +
    "\uffee\013\uffee\014\111\015\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\042" +
    "\uffee\001\002\000\052\002\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\037\uffea\042\uffea\001\002\000\016\011\uffd5\013" +
    "\uffd5\015\uffd5\025\uffd5\026\uffd5\042\uffd5\001\002\000\016" +
    "\011\uffd4\013\uffd4\015\uffd4\025\uffd4\026\uffd4\042\uffd4\001" +
    "\002\000\016\011\032\013\030\015\044\025\036\026\034" +
    "\042\031\001\002\000\052\002\uffef\006\uffef\007\uffef\010" +
    "\ufff0\011\ufff0\012\uffef\013\ufff0\014\uffef\015\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\112\030\113\037\uffef\042\ufff0\001\002\000\006\002\ufffe" +
    "\036\117\001\002\000\004\045\013\001\002\000\004\002" +
    "\uffff\001\002\000\004\006\122\001\002\000\014\031\017" +
    "\032\016\033\023\034\022\035\021\001\002\000\006\002" +
    "\ufffb\017\025\001\002\000\040\006\125\010\uffee\011\uffee" +
    "\013\uffee\015\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\042\uffee\001\002" +
    "\000\016\011\032\013\030\015\044\025\036\026\034\042" +
    "\031\001\002\000\004\007\ufffa\001\002\000\016\011\032" +
    "\013\030\015\044\025\036\026\034\042\031\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufff9\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\010\002\003\003\011\004\004\001\001\000" +
    "\002\001\001\000\004\005\127\001\001\000\022\007\123" +
    "\010\036\011\042\012\041\013\037\014\026\016\032\027" +
    "\040\001\001\000\004\022\120\001\001\000\004\022\115" +
    "\001\001\000\004\022\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\034\010\036\011\042\012\041\013\037\014\026\016" +
    "\032\027\040\001\001\000\004\023\025\001\001\000\002" +
    "\001\001\000\004\026\113\001\001\000\022\007\107\010" +
    "\036\011\042\012\041\013\037\014\026\016\032\027\040" +
    "\001\001\000\002\001\001\000\026\007\054\010\101\011" +
    "\042\012\041\013\037\014\026\016\032\017\102\022\100" +
    "\027\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\073\001\001\000\004\022\066\001\001\000\004\024" +
    "\064\001\001\000\022\007\054\010\036\011\055\012\041" +
    "\013\037\014\026\016\032\027\040\001\001\000\006\020" +
    "\044\022\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\047\001\001\000\002\001\001\000\026\006" +
    "\053\007\051\010\036\011\042\012\041\013\037\014\026" +
    "\016\032\021\052\027\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\054\010\036\011\055\012\041\013\037\014\026\016" +
    "\032\027\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\054\010\036\011\042\012\065" +
    "\013\037\014\026\016\032\027\040\001\001\000\004\024" +
    "\064\001\001\000\004\015\070\001\001\000\004\023\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\054\010\036\011\042\012\041\013\075" +
    "\014\026\016\032\027\040\001\001\000\002\001\001\000" +
    "\004\025\073\001\001\000\022\007\077\010\036\011\042" +
    "\012\041\013\037\014\026\016\032\027\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\106\010\036\011\042\012\041\013\037\014\026\016\032" +
    "\027\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\054\010\036\011\042\012\041\013\037\014\114\016" +
    "\032\027\040\001\001\000\004\026\113\001\001\000\002" +
    "\001\001\000\004\022\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\125\007\051\010\036\011" +
    "\042\012\041\013\037\014\026\016\032\027\040\001\001" +
    "\000\002\001\001\000\024\006\130\007\051\010\036\011" +
    "\042\012\041\013\037\014\026\016\032\027\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public hardtyped.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (hardtyped.Absyn.Program) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		hardtyped.Absyn.Program start_val = (hardtyped.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Stm 
            {
              hardtyped.Absyn.Program RESULT =null;
		hardtyped.Absyn.Stm p_1 = (hardtyped.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Progr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Stm ::= _SYMB_0 Identifier _SYMB_26 Identifier 
            {
              hardtyped.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		hardtyped.Absyn.Identifier p_2 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Identifier p_4 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.ImportAs(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Stm ::= _SYMB_0 Identifier 
            {
              hardtyped.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Identifier p_2 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.ImportPlain(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stm ::= IfStart Else 
            {
              hardtyped.Absyn.Stm RESULT =null;
		hardtyped.Absyn.IfStart p_1 = (hardtyped.Absyn.IfStart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Else p_2 = (hardtyped.Absyn.Else)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.If(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stm ::= _SYMB_28 Identifier _SYMB_2 Type _SYMB_4 Expression _SYMB_27 Expression 
            {
              hardtyped.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		hardtyped.Absyn.Identifier p_2 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		hardtyped.Absyn.Type p_4 = (hardtyped.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		hardtyped.Absyn.Expression p_6 = (hardtyped.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Expression p_8 = (hardtyped.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Let(p_2,p_4,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stm ::= _SYMB_29 Identifier _SYMB_2 Type 
            {
              hardtyped.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		hardtyped.Absyn.Identifier p_2 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Type p_4 = (hardtyped.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Letrec(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IfStart ::= _SYMB_1 Expression _SYMB_2 Body 
            {
              hardtyped.Absyn.IfStart RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		hardtyped.Absyn.Expression p_2 = (hardtyped.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Body p_4 = (hardtyped.Absyn.Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.IfStart1(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStart",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Else ::= _SYMB_3 Body 
            {
              hardtyped.Absyn.Else RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Body p_2 = (hardtyped.Absyn.Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Else1(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Body ::= Expression 
            {
              hardtyped.Absyn.Body RESULT =null;
		hardtyped.Absyn.Expression p_1 = (hardtyped.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Body1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expression ::= Conjunction 
            {
              hardtyped.Absyn.Expression RESULT =null;
		hardtyped.Absyn.Conjunction p_1 = (hardtyped.Absyn.Conjunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Expression1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression ::= _SYMB_5 Conjunction _SYMB_6 
            {
              hardtyped.Absyn.Expression RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		hardtyped.Absyn.Conjunction p_2 = (hardtyped.Absyn.Conjunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Expression2(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Conjunction ::= Relation Relation 
            {
              hardtyped.Absyn.Conjunction RESULT =null;
		hardtyped.Absyn.Relation p_1 = (hardtyped.Absyn.Relation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Relation p_2 = (hardtyped.Absyn.Relation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Conjunction1(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Conjunction",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Relation ::= Factor 
            {
              hardtyped.Absyn.Relation RESULT =null;
		hardtyped.Absyn.Factor p_1 = (hardtyped.Absyn.Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Relation1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relation",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Relation ::= Factor Operand Factor 
            {
              hardtyped.Absyn.Relation RESULT =null;
		hardtyped.Absyn.Factor p_1 = (hardtyped.Absyn.Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		hardtyped.Absyn.Operand p_2 = (hardtyped.Absyn.Operand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Factor p_3 = (hardtyped.Absyn.Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Relation2(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relation",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Factor ::= Term 
            {
              hardtyped.Absyn.Factor RESULT =null;
		hardtyped.Absyn.Term p_1 = (hardtyped.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Factor1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Factor ::= Term PlusMinus Term 
            {
              hardtyped.Absyn.Factor RESULT =null;
		hardtyped.Absyn.Term p_1 = (hardtyped.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		hardtyped.Absyn.PlusMinus p_2 = (hardtyped.Absyn.PlusMinus)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Term p_3 = (hardtyped.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Factor2(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Term ::= Unary 
            {
              hardtyped.Absyn.Term RESULT =null;
		hardtyped.Absyn.Unary p_1 = (hardtyped.Absyn.Unary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Term1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Term ::= Unary MultDiv Unary 
            {
              hardtyped.Absyn.Term RESULT =null;
		hardtyped.Absyn.Unary p_1 = (hardtyped.Absyn.Unary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		hardtyped.Absyn.MultDiv p_2 = (hardtyped.Absyn.MultDiv)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Unary p_3 = (hardtyped.Absyn.Unary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Term2(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Unary ::= Expression 
            {
              hardtyped.Absyn.Unary RESULT =null;
		hardtyped.Absyn.Expression p_1 = (hardtyped.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Unary1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Unary ::= Literal 
            {
              hardtyped.Absyn.Unary RESULT =null;
		hardtyped.Absyn.Literal p_1 = (hardtyped.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Unary2(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Unary ::= UnaryPrefix Identifier Ascription 
            {
              hardtyped.Absyn.Unary RESULT =null;
		hardtyped.Absyn.UnaryPrefix p_1 = (hardtyped.Absyn.UnaryPrefix)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		hardtyped.Absyn.Identifier p_2 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Ascription p_3 = (hardtyped.Absyn.Ascription)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Unary3(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Unary",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Ascription ::= _SYMB_26 Type 
            {
              hardtyped.Absyn.Ascription RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Type p_2 = (hardtyped.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Ascription1(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ascription",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Literal ::= _SYMB_7 Expression _SYMB_8 
            {
              hardtyped.Absyn.Literal RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		hardtyped.Absyn.Expression p_2 = (hardtyped.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.ArrayLiteral(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Literal ::= _SYMB_9 FunctionParameters _SYMB_10 FunctionBody 
            {
              hardtyped.Absyn.Literal RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		hardtyped.Absyn.FunctionParameters p_2 = (hardtyped.Absyn.FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.FunctionBody p_4 = (hardtyped.Absyn.FunctionBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.FunctionLiteral(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Literal ::= _SYMB_5 RecordElement _SYMB_6 
            {
              hardtyped.Absyn.Literal RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		hardtyped.Absyn.RecordElement p_2 = (hardtyped.Absyn.RecordElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.RecordLiteral(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RecordElement ::= Identifier _SYMB_4 Expression 
            {
              hardtyped.Absyn.RecordElement RESULT =null;
		hardtyped.Absyn.Identifier p_1 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Expression p_3 = (hardtyped.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.RecordElement1(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecordElement",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionParameters ::= Identifier _SYMB_2 Type 
            {
              hardtyped.Absyn.FunctionParameters RESULT =null;
		hardtyped.Absyn.Identifier p_1 = (hardtyped.Absyn.Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Type p_3 = (hardtyped.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.FunctionParameters1(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionParameters",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FunctionBody ::= Body 
            {
              hardtyped.Absyn.FunctionBody RESULT =null;
		hardtyped.Absyn.Body p_1 = (hardtyped.Absyn.Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.FunctionBody1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Identifier ::= Str 
            {
              hardtyped.Absyn.Identifier RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Identifier1(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_22 
            {
              hardtyped.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Int(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_23 
            {
              hardtyped.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Real(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_24 
            {
              hardtyped.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Str(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_21 
            {
              hardtyped.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Boolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= _SYMB_25 
            {
              hardtyped.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Unit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= Type _SYMB_11 Type 
            {
              hardtyped.Absyn.Type RESULT =null;
		hardtyped.Absyn.Type p_1 = (hardtyped.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		hardtyped.Absyn.Type p_3 = (hardtyped.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.FunctionTypeIndicator(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Operand ::= _SYMB_12 
            {
              hardtyped.Absyn.Operand RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Less(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operand",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Operand ::= _SYMB_13 
            {
              hardtyped.Absyn.Operand RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.LessEql(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operand",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Operand ::= _SYMB_14 
            {
              hardtyped.Absyn.Operand RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.More(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operand",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Operand ::= _SYMB_15 
            {
              hardtyped.Absyn.Operand RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.MoreEql(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operand",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Operand ::= _SYMB_4 
            {
              hardtyped.Absyn.Operand RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Eql(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operand",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Operand ::= _SYMB_16 
            {
              hardtyped.Absyn.Operand RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.NotEql(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operand",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PlusMinus ::= _SYMB_17 
            {
              hardtyped.Absyn.PlusMinus RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Plus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PlusMinus",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PlusMinus ::= _SYMB_18 
            {
              hardtyped.Absyn.PlusMinus RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Minus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PlusMinus",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MultDiv ::= _SYMB_19 
            {
              hardtyped.Absyn.MultDiv RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Mult(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultDiv",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MultDiv ::= _SYMB_20 
            {
              hardtyped.Absyn.MultDiv RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.Div(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultDiv",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // UnaryPrefix ::= _SYMB_17 
            {
              hardtyped.Absyn.UnaryPrefix RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.PlusPfx(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryPrefix",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UnaryPrefix ::= _SYMB_18 
            {
              hardtyped.Absyn.UnaryPrefix RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.MinusPfx(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryPrefix",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UnaryPrefix ::= _SYMB_30 
            {
              hardtyped.Absyn.UnaryPrefix RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new hardtyped.Absyn.NotPfx(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryPrefix",21, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
