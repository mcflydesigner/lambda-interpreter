// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;

/** Abstract Visitor */

public class AbstractVisitor<R,A> implements AllVisitor<R,A> {
    /* Program */
    public R visit(hardtyped.Absyn.Progr p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Program p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Import */
    public R visit(hardtyped.Absyn.ImportAs p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.ImportPlain p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Import p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Expr */
    public R visit(hardtyped.Absyn.If p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Let1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Let2 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Function p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Disjunction p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Conjunction p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Relation p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Factor p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Term p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Unary p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Expr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IfCase */
    public R visit(hardtyped.Absyn.IfCase1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.IfCase p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* ElseCase */
    public R visit(hardtyped.Absyn.ElseCase1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.ElseCase p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* LetHead */
    public R visit(hardtyped.Absyn.LetHeadPlain p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.LetrecHead p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.LetHead p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Op */
    public R visit(hardtyped.Absyn.Op1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Op2 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Op3 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Op4 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Op5 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Op6 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Op p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* PlusMinus */
    public R visit(hardtyped.Absyn.PlusMinus1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.PlusMinus2 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.PlusMinus p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* MultDiv */
    public R visit(hardtyped.Absyn.MultDiv1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.MultDiv2 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.MultDiv p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* UnaryDef */
    public R visit(hardtyped.Absyn.UnaryDefLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.UnaryDefIdent p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.UnaryDef p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* FuncParameter */
    public R visit(hardtyped.Absyn.FuncParameter1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.FuncParameter p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* FuncBody */
    public R visit(hardtyped.Absyn.FuncBody1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.FuncBody p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Literal */
    public R visit(hardtyped.Absyn.IntegerLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.UnitLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.BooleanLiteral_true p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.BooleanLiteral_false p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.StringLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.RealLiteral p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Literal p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Type */
    public R visit(hardtyped.Absyn.Int p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Real p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Str p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Boolean p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Unit p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.FunctionType p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Type p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }

}
