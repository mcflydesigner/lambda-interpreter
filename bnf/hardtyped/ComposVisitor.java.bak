// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  hardtyped.Absyn.Program.Visitor<hardtyped.Absyn.Program,A>,
  hardtyped.Absyn.Import.Visitor<hardtyped.Absyn.Import,A>,
  hardtyped.Absyn.Expr.Visitor<hardtyped.Absyn.Expr,A>,
  hardtyped.Absyn.IfCase.Visitor<hardtyped.Absyn.IfCase,A>,
  hardtyped.Absyn.ElseCase.Visitor<hardtyped.Absyn.ElseCase,A>,
  hardtyped.Absyn.LetHead.Visitor<hardtyped.Absyn.LetHead,A>,
  hardtyped.Absyn.Op.Visitor<hardtyped.Absyn.Op,A>,
  hardtyped.Absyn.PlusMinus.Visitor<hardtyped.Absyn.PlusMinus,A>,
  hardtyped.Absyn.MultDiv.Visitor<hardtyped.Absyn.MultDiv,A>,
  hardtyped.Absyn.UnaryDef.Visitor<hardtyped.Absyn.UnaryDef,A>,
  hardtyped.Absyn.FuncParameter.Visitor<hardtyped.Absyn.FuncParameter,A>,
  hardtyped.Absyn.FuncBody.Visitor<hardtyped.Absyn.FuncBody,A>,
  hardtyped.Absyn.Literal.Visitor<hardtyped.Absyn.Literal,A>,
  hardtyped.Absyn.Type.Visitor<hardtyped.Absyn.Type,A>
{
    /* Program */
    public hardtyped.Absyn.Program visit(hardtyped.Absyn.Progr p, A arg)
    {
      hardtyped.Absyn.ListImport listimport_ = new hardtyped.Absyn.ListImport();
      for (hardtyped.Absyn.Import x : p.listimport_)
      {
        listimport_.add(x.accept(this,arg));
      }
      hardtyped.Absyn.ListExpr listexpr_ = new hardtyped.Absyn.ListExpr();
      for (hardtyped.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new hardtyped.Absyn.Progr(listimport_, listexpr_);
    }

    /* Import */
    public hardtyped.Absyn.Import visit(hardtyped.Absyn.ImportAs p, A arg)
    {
      String string_ = p.string_;
      String ident_ = p.ident_;
      return new hardtyped.Absyn.ImportAs(string_, ident_);
    }
    public hardtyped.Absyn.Import visit(hardtyped.Absyn.ImportPlain p, A arg)
    {
      String string_ = p.string_;
      return new hardtyped.Absyn.ImportPlain(string_);
    }

    /* Expr */
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.If p, A arg)
    {
      hardtyped.Absyn.ListIfCase listifcase_ = new hardtyped.Absyn.ListIfCase();
      for (hardtyped.Absyn.IfCase x : p.listifcase_)
      {
        listifcase_.add(x.accept(this,arg));
      }
      hardtyped.Absyn.ElseCase elsecase_ = p.elsecase_.accept(this, arg);
      return new hardtyped.Absyn.If(listifcase_, elsecase_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Let1 p, A arg)
    {
      hardtyped.Absyn.LetHead lethead_ = p.lethead_.accept(this, arg);
      return new hardtyped.Absyn.Let1(lethead_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Let2 p, A arg)
    {
      hardtyped.Absyn.LetHead lethead_ = p.lethead_.accept(this, arg);
      hardtyped.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new hardtyped.Absyn.Let2(lethead_, expr_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Function p, A arg)
    {
      hardtyped.Absyn.ListFuncParameter listfuncparameter_ = new hardtyped.Absyn.ListFuncParameter();
      for (hardtyped.Absyn.FuncParameter x : p.listfuncparameter_)
      {
        listfuncparameter_.add(x.accept(this,arg));
      }
      hardtyped.Absyn.FuncBody funcbody_ = p.funcbody_.accept(this, arg);
      return new hardtyped.Absyn.Function(listfuncparameter_, funcbody_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Disjunction p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Disjunction(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Conjunction p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Conjunction(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Relation p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Op op_ = p.op_.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Relation(expr_1, op_, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Factor p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.PlusMinus plusminus_ = p.plusminus_.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Factor(expr_1, plusminus_, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Term p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.MultDiv multdiv_ = p.multdiv_.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Term(expr_1, multdiv_, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Unary p, A arg)
    {
      hardtyped.Absyn.UnaryDef unarydef_ = p.unarydef_.accept(this, arg);
      return new hardtyped.Absyn.Unary(unarydef_);
    }

    /* IfCase */
    public hardtyped.Absyn.IfCase visit(hardtyped.Absyn.IfCase1 p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.IfCase1(expr_1, expr_2);
    }

    /* ElseCase */
    public hardtyped.Absyn.ElseCase visit(hardtyped.Absyn.ElseCase1 p, A arg)
    {
      hardtyped.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new hardtyped.Absyn.ElseCase1(expr_);
    }

    /* LetHead */
    public hardtyped.Absyn.LetHead visit(hardtyped.Absyn.LetHeadPlain p, A arg)
    {
      String ident_ = p.ident_;
      hardtyped.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new hardtyped.Absyn.LetHeadPlain(ident_, expr_);
    }
    public hardtyped.Absyn.LetHead visit(hardtyped.Absyn.LetrecHead p, A arg)
    {
      String ident_ = p.ident_;
      hardtyped.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new hardtyped.Absyn.LetrecHead(ident_, expr_);
    }

    /* Op */
    public hardtyped.Absyn.Op visit(hardtyped.Absyn.Op1 p, A arg)
    {
      return new hardtyped.Absyn.Op1();
    }
    public hardtyped.Absyn.Op visit(hardtyped.Absyn.Op2 p, A arg)
    {
      return new hardtyped.Absyn.Op2();
    }
    public hardtyped.Absyn.Op visit(hardtyped.Absyn.Op3 p, A arg)
    {
      return new hardtyped.Absyn.Op3();
    }
    public hardtyped.Absyn.Op visit(hardtyped.Absyn.Op4 p, A arg)
    {
      return new hardtyped.Absyn.Op4();
    }
    public hardtyped.Absyn.Op visit(hardtyped.Absyn.Op5 p, A arg)
    {
      return new hardtyped.Absyn.Op5();
    }
    public hardtyped.Absyn.Op visit(hardtyped.Absyn.Op6 p, A arg)
    {
      return new hardtyped.Absyn.Op6();
    }

    /* PlusMinus */
    public hardtyped.Absyn.PlusMinus visit(hardtyped.Absyn.PlusMinus1 p, A arg)
    {
      return new hardtyped.Absyn.PlusMinus1();
    }
    public hardtyped.Absyn.PlusMinus visit(hardtyped.Absyn.PlusMinus2 p, A arg)
    {
      return new hardtyped.Absyn.PlusMinus2();
    }

    /* MultDiv */
    public hardtyped.Absyn.MultDiv visit(hardtyped.Absyn.MultDiv1 p, A arg)
    {
      return new hardtyped.Absyn.MultDiv1();
    }
    public hardtyped.Absyn.MultDiv visit(hardtyped.Absyn.MultDiv2 p, A arg)
    {
      return new hardtyped.Absyn.MultDiv2();
    }

    /* UnaryDef */
    public hardtyped.Absyn.UnaryDef visit(hardtyped.Absyn.UnaryDefLiteral p, A arg)
    {
      hardtyped.Absyn.Literal literal_ = p.literal_.accept(this, arg);
      return new hardtyped.Absyn.UnaryDefLiteral(literal_);
    }
    public hardtyped.Absyn.UnaryDef visit(hardtyped.Absyn.UnaryDefIdent p, A arg)
    {
      String ident_ = p.ident_;
      return new hardtyped.Absyn.UnaryDefIdent(ident_);
    }

    /* FuncParameter */
    public hardtyped.Absyn.FuncParameter visit(hardtyped.Absyn.FuncParameter1 p, A arg)
    {
      String ident_ = p.ident_;
      hardtyped.Absyn.Type type_ = p.type_.accept(this, arg);
      return new hardtyped.Absyn.FuncParameter1(ident_, type_);
    }

    /* FuncBody */
    public hardtyped.Absyn.FuncBody visit(hardtyped.Absyn.FuncBody1 p, A arg)
    {
      hardtyped.Absyn.ListExpr listexpr_ = new hardtyped.Absyn.ListExpr();
      for (hardtyped.Absyn.Expr x : p.listexpr_)
      {
        listexpr_.add(x.accept(this,arg));
      }
      return new hardtyped.Absyn.FuncBody1(listexpr_);
    }

    /* Literal */
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.IntegerLiteral p, A arg)
    {
      Integer integer_ = p.integer_;
      return new hardtyped.Absyn.IntegerLiteral(integer_);
    }
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.UnitLiteral p, A arg)
    {
      return new hardtyped.Absyn.UnitLiteral();
    }
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.BooleanLiteral_true p, A arg)
    {
      return new hardtyped.Absyn.BooleanLiteral_true();
    }
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.BooleanLiteral_false p, A arg)
    {
      return new hardtyped.Absyn.BooleanLiteral_false();
    }
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.StringLiteral p, A arg)
    {
      String string_ = p.string_;
      return new hardtyped.Absyn.StringLiteral(string_);
    }
    public hardtyped.Absyn.Literal visit(hardtyped.Absyn.RealLiteral p, A arg)
    {
      Double double_ = p.double_;
      return new hardtyped.Absyn.RealLiteral(double_);
    }

    /* Type */
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Int p, A arg)
    {
      return new hardtyped.Absyn.Int();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Real p, A arg)
    {
      return new hardtyped.Absyn.Real();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Str p, A arg)
    {
      return new hardtyped.Absyn.Str();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Boolean p, A arg)
    {
      return new hardtyped.Absyn.Boolean();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.Unit p, A arg)
    {
      return new hardtyped.Absyn.Unit();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.FunctionType p, A arg)
    {
      hardtyped.Absyn.Type type_1 = p.type_1.accept(this, arg);
      hardtyped.Absyn.Type type_2 = p.type_2.accept(this, arg);
      return new hardtyped.Absyn.FunctionType(type_1, type_2);
    }
}
