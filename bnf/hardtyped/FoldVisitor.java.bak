// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;

/** Fold Visitor */
public abstract class FoldVisitor<R,A> implements AllVisitor<R,A> {
    public abstract R leaf(A arg);
    public abstract R combine(R x, R y, A arg);

/* Program */
    public R visit(hardtyped.Absyn.Progr p, A arg) {
      R r = leaf(arg);
      for (hardtyped.Absyn.Import x : p.listimport_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      for (hardtyped.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* Import */
    public R visit(hardtyped.Absyn.ImportAs p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.ImportPlain p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* Expr */
    public R visit(hardtyped.Absyn.If p, A arg) {
      R r = leaf(arg);
      for (hardtyped.Absyn.IfCase x : p.listifcase_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.elsecase_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Let1 p, A arg) {
      R r = leaf(arg);
      r = combine(p.lethead_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Let2 p, A arg) {
      R r = leaf(arg);
      r = combine(p.lethead_.accept(this, arg), r, arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Function p, A arg) {
      R r = leaf(arg);
      for (hardtyped.Absyn.FuncParameter x : p.listfuncparameter_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      r = combine(p.funcbody_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Disjunction p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Conjunction p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Relation p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.op_.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Factor p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.plusminus_.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Term p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.multdiv_.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Unary p, A arg) {
      R r = leaf(arg);
      r = combine(p.unarydef_.accept(this, arg), r, arg);
      return r;
    }

/* IfCase */
    public R visit(hardtyped.Absyn.IfCase1 p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_1.accept(this, arg), r, arg);
      r = combine(p.expr_2.accept(this, arg), r, arg);
      return r;
    }

/* ElseCase */
    public R visit(hardtyped.Absyn.ElseCase1 p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }

/* LetHead */
    public R visit(hardtyped.Absyn.LetHeadPlain p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.LetrecHead p, A arg) {
      R r = leaf(arg);
      r = combine(p.expr_.accept(this, arg), r, arg);
      return r;
    }

/* Op */
    public R visit(hardtyped.Absyn.Op1 p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Op2 p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Op3 p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Op4 p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Op5 p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Op6 p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* PlusMinus */
    public R visit(hardtyped.Absyn.PlusMinus1 p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.PlusMinus2 p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* MultDiv */
    public R visit(hardtyped.Absyn.MultDiv1 p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.MultDiv2 p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* UnaryDef */
    public R visit(hardtyped.Absyn.UnaryDefLiteral p, A arg) {
      R r = leaf(arg);
      r = combine(p.literal_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(hardtyped.Absyn.UnaryDefIdent p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* FuncParameter */
    public R visit(hardtyped.Absyn.FuncParameter1 p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_.accept(this, arg), r, arg);
      return r;
    }

/* FuncBody */
    public R visit(hardtyped.Absyn.FuncBody1 p, A arg) {
      R r = leaf(arg);
      for (hardtyped.Absyn.Expr x : p.listexpr_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* Literal */
    public R visit(hardtyped.Absyn.IntegerLiteral p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.UnitLiteral p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.BooleanLiteral_true p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.BooleanLiteral_false p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.StringLiteral p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.RealLiteral p, A arg) {
      R r = leaf(arg);
      return r;
    }

/* Type */
    public R visit(hardtyped.Absyn.Int p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Real p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Str p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Boolean p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.Unit p, A arg) {
      R r = leaf(arg);
      return r;
    }
    public R visit(hardtyped.Absyn.FunctionType p, A arg) {
      R r = leaf(arg);
      r = combine(p.type_1.accept(this, arg), r, arg);
      r = combine(p.type_2.accept(this, arg), r, arg);
      return r;
    }


}
