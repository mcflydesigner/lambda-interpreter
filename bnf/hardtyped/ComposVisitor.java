// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  hardtyped.Absyn.Expr.Visitor<hardtyped.Absyn.Expr,A>,
  hardtyped.Absyn.VarDec.Visitor<hardtyped.Absyn.VarDec,A>,
  hardtyped.Absyn.Type.Visitor<hardtyped.Absyn.Type,A>
{
    /* Expr */
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Function p, A arg)
    {
      hardtyped.Absyn.VarDec vardec_ = p.vardec_.accept(this, arg);
      hardtyped.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new hardtyped.Absyn.Function(vardec_, expr_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.ApplyFunction p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.ApplyFunction(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Sum p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Sum(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Substract p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Substract(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Multiply p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Multiply(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Divide p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.Divide(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.Let p, A arg)
    {
      hardtyped.Absyn.VarDec vardec_ = p.vardec_.accept(this, arg);
      hardtyped.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new hardtyped.Absyn.Let(vardec_, expr_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.LetInference p, A arg)
    {
      hardtyped.Absyn.VarDec vardec_ = p.vardec_.accept(this, arg);
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.LetInference(vardec_, expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.LetAscription p, A arg)
    {
      hardtyped.Absyn.VarDec vardec_ = p.vardec_.accept(this, arg);
      hardtyped.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      hardtyped.Absyn.Type type_ = p.type_.accept(this, arg);
      return new hardtyped.Absyn.LetAscription(vardec_, expr_, type_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.IntValue p, A arg)
    {
      Integer integer_ = p.integer_;
      return new hardtyped.Absyn.IntValue(integer_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.RealValue p, A arg)
    {
      Double double_ = p.double_;
      return new hardtyped.Absyn.RealValue(double_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.StringValue p, A arg)
    {
      String string_ = p.string_;
      return new hardtyped.Absyn.StringValue(string_);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.MultipleExpressions p, A arg)
    {
      hardtyped.Absyn.Expr expr_1 = p.expr_1.accept(this, arg);
      hardtyped.Absyn.Expr expr_2 = p.expr_2.accept(this, arg);
      return new hardtyped.Absyn.MultipleExpressions(expr_1, expr_2);
    }
    public hardtyped.Absyn.Expr visit(hardtyped.Absyn.AtomicExpression p, A arg)
    {
      String ident_ = p.ident_;
      return new hardtyped.Absyn.AtomicExpression(ident_);
    }

    /* VarDec */
    public hardtyped.Absyn.VarDec visit(hardtyped.Absyn.MultipleVars p, A arg)
    {
      hardtyped.Absyn.VarDec vardec_1 = p.vardec_1.accept(this, arg);
      hardtyped.Absyn.VarDec vardec_2 = p.vardec_2.accept(this, arg);
      return new hardtyped.Absyn.MultipleVars(vardec_1, vardec_2);
    }
    public hardtyped.Absyn.VarDec visit(hardtyped.Absyn.MultipleVarsFinal p, A arg)
    {
      hardtyped.Absyn.VarDec vardec_ = p.vardec_.accept(this, arg);
      return new hardtyped.Absyn.MultipleVarsFinal(vardec_);
    }
    public hardtyped.Absyn.VarDec visit(hardtyped.Absyn.TypedVar p, A arg)
    {
      String ident_ = p.ident_;
      hardtyped.Absyn.Type type_ = p.type_.accept(this, arg);
      return new hardtyped.Absyn.TypedVar(ident_, type_);
    }
    public hardtyped.Absyn.VarDec visit(hardtyped.Absyn.UntypedVar p, A arg)
    {
      String ident_ = p.ident_;
      return new hardtyped.Absyn.UntypedVar(ident_);
    }

    /* Type */
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.IntType p, A arg)
    {
      return new hardtyped.Absyn.IntType();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.RealType p, A arg)
    {
      return new hardtyped.Absyn.RealType();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.BoolType p, A arg)
    {
      return new hardtyped.Absyn.BoolType();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.StringType p, A arg)
    {
      return new hardtyped.Absyn.StringType();
    }
    public hardtyped.Absyn.Type visit(hardtyped.Absyn.UnitType p, A arg)
    {
      return new hardtyped.Absyn.UnitType();
    }
}
