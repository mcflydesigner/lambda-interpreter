// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;

/*** Visitor Design Pattern Skeleton. ***/

/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use.
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class ExprVisitor<R,A> implements hardtyped.Absyn.Expr.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.Function p, A arg)
    { /* Code for Function goes here */
      p.vardec_.accept(new VarDecVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.ApplyFunction p, A arg)
    { /* Code for ApplyFunction goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Sum p, A arg)
    { /* Code for Sum goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Substract p, A arg)
    { /* Code for Substract goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Multiply p, A arg)
    { /* Code for Multiply goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Divide p, A arg)
    { /* Code for Divide goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Let p, A arg)
    { /* Code for Let goes here */
      p.vardec_.accept(new VarDecVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.LetInference p, A arg)
    { /* Code for LetInference goes here */
      p.vardec_.accept(new VarDecVisitor<R,A>(), arg);
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.LetAscription p, A arg)
    { /* Code for LetAscription goes here */
      p.vardec_.accept(new VarDecVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.IntValue p, A arg)
    { /* Code for IntValue goes here */
      //p.integer_;
      return null;
    }
    public R visit(hardtyped.Absyn.RealValue p, A arg)
    { /* Code for RealValue goes here */
      //p.double_;
      return null;
    }
    public R visit(hardtyped.Absyn.StringValue p, A arg)
    { /* Code for StringValue goes here */
      //p.string_;
      return null;
    }
    public R visit(hardtyped.Absyn.MultipleExpressions p, A arg)
    { /* Code for MultipleExpressions goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.AtomicExpression p, A arg)
    { /* Code for AtomicExpression goes here */
      //p.ident_;
      return null;
    }
  }
  public class VarDecVisitor<R,A> implements hardtyped.Absyn.VarDec.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.MultipleVars p, A arg)
    { /* Code for MultipleVars goes here */
      p.vardec_1.accept(new VarDecVisitor<R,A>(), arg);
      p.vardec_2.accept(new VarDecVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.MultipleVarsFinal p, A arg)
    { /* Code for MultipleVarsFinal goes here */
      p.vardec_.accept(new VarDecVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.TypedVar p, A arg)
    { /* Code for TypedVar goes here */
      //p.ident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.UntypedVar p, A arg)
    { /* Code for UntypedVar goes here */
      //p.ident_;
      return null;
    }
  }
  public class TypeVisitor<R,A> implements hardtyped.Absyn.Type.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.IntType p, A arg)
    { /* Code for IntType goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.RealType p, A arg)
    { /* Code for RealType goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.BoolType p, A arg)
    { /* Code for BoolType goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.StringType p, A arg)
    { /* Code for StringType goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.UnitType p, A arg)
    { /* Code for UnitType goes here */
      return null;
    }
  }
}
