// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(hardtyped.Absyn.Program foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.Program foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.ListImport foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.ListImport foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.ListExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.ListExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.Import foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.Import foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.Expr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.Expr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.ListIfCase foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.ListIfCase foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.IfCase foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.IfCase foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.ElseCase foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.ElseCase foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.LetHead foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.LetHead foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.Op foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.Op foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.PlusMinus foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.PlusMinus foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.MultDiv foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.MultDiv foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.UnaryDef foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.UnaryDef foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.ListFuncParameter foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.ListFuncParameter foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.FuncParameter foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.FuncParameter foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.FuncBody foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.FuncBody foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.Literal foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.Literal foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(hardtyped.Absyn.Type foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(hardtyped.Absyn.Type foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(hardtyped.Absyn.Program foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.Progr)
    {
       hardtyped.Absyn.Progr _progr = (hardtyped.Absyn.Progr) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_progr.listimport_, 0);
       pp(_progr.listexpr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.ListImport foo, int _i_)
  {
    ppListImport(foo.iterator(), _i_);
  }

  private static void ppListImport(java.util.Iterator<hardtyped.Absyn.Import> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      hardtyped.Absyn.Import el = it.next();
      pp(el, _i_); render("
"); ppListImport(it, _i_);
    }
  }


  private static void pp(hardtyped.Absyn.ListExpr foo, int _i_)
  {
    ppListExpr(foo.iterator(), _i_);
  }

  private static void ppListExpr(java.util.Iterator<hardtyped.Absyn.Expr> it, int _i_)
  {
    if (it.hasNext())
    {
      hardtyped.Absyn.Expr el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(";"); ppListExpr(it, _i_);
      }
    }
  }


  private static void pp(hardtyped.Absyn.Import foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.ImportAs)
    {
       hardtyped.Absyn.ImportAs _importas = (hardtyped.Absyn.ImportAs) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("-|");
       printQuoted(_importas.string_);
       render("as");
       pp(_importas.ident_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.ImportPlain)
    {
       hardtyped.Absyn.ImportPlain _importplain = (hardtyped.Absyn.ImportPlain) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("-|");
       printQuoted(_importplain.string_);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.Expr foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.If)
    {
       hardtyped.Absyn.If _if = (hardtyped.Absyn.If) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_if.listifcase_, 0);
       pp(_if.elsecase_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Let1)
    {
       hardtyped.Absyn.Let1 _let1 = (hardtyped.Absyn.Let1) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_let1.lethead_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Let2)
    {
       hardtyped.Absyn.Let2 _let2 = (hardtyped.Absyn.Let2) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_let2.lethead_, 0);
       render("in");
       pp(_let2.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Function)
    {
       hardtyped.Absyn.Function _function = (hardtyped.Absyn.Function) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("/\\");
       pp(_function.listfuncparameter_, 0);
       pp(_function.funcbody_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Disjunction)
    {
       hardtyped.Absyn.Disjunction _disjunction = (hardtyped.Absyn.Disjunction) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_disjunction.expr_1, 0);
       render("or");
       pp(_disjunction.expr_2, 0);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Conjunction)
    {
       hardtyped.Absyn.Conjunction _conjunction = (hardtyped.Absyn.Conjunction) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_conjunction.expr_1, 0);
       render("and");
       pp(_conjunction.expr_2, 0);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Relation)
    {
       hardtyped.Absyn.Relation _relation = (hardtyped.Absyn.Relation) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_relation.expr_1, 0);
       pp(_relation.op_, 0);
       pp(_relation.expr_2, 0);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Factor)
    {
       hardtyped.Absyn.Factor _factor = (hardtyped.Absyn.Factor) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_factor.expr_1, 0);
       pp(_factor.plusminus_, 0);
       pp(_factor.expr_2, 0);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Term)
    {
       hardtyped.Absyn.Term _term = (hardtyped.Absyn.Term) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_term.expr_1, 0);
       pp(_term.multdiv_, 0);
       pp(_term.expr_2, 0);
       if (_i_ > 2) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Unary)
    {
       hardtyped.Absyn.Unary _unary = (hardtyped.Absyn.Unary) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_unary.unarydef_, 0);
       if (_i_ > 3) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.ListIfCase foo, int _i_)
  {
    ppListIfCase(foo.iterator(), _i_);
  }

  private static void ppListIfCase(java.util.Iterator<hardtyped.Absyn.IfCase> it, int _i_)
  {
    if (it.hasNext())
    {
      hardtyped.Absyn.IfCase el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); ppListIfCase(it, _i_);
      }
    }
  }


  private static void pp(hardtyped.Absyn.IfCase foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.IfCase1)
    {
       hardtyped.Absyn.IfCase1 _ifcase1 = (hardtyped.Absyn.IfCase1) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("|");
       pp(_ifcase1.expr_1, 0);
       render(":");
       pp(_ifcase1.expr_2, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.ElseCase foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.ElseCase1)
    {
       hardtyped.Absyn.ElseCase1 _elsecase1 = (hardtyped.Absyn.ElseCase1) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("|:");
       pp(_elsecase1.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.LetHead foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.LetHeadPlain)
    {
       hardtyped.Absyn.LetHeadPlain _letheadplain = (hardtyped.Absyn.LetHeadPlain) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("let");
       pp(_letheadplain.ident_, 0);
       render("=");
       pp(_letheadplain.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.LetrecHead)
    {
       hardtyped.Absyn.LetrecHead _letrechead = (hardtyped.Absyn.LetrecHead) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("letrec");
       pp(_letrechead.ident_, 0);
       render("=");
       pp(_letrechead.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.Op foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.Op1)
    {
       hardtyped.Absyn.Op1 _op1 = (hardtyped.Absyn.Op1) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("<");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Op2)
    {
       hardtyped.Absyn.Op2 _op2 = (hardtyped.Absyn.Op2) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("<=");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Op3)
    {
       hardtyped.Absyn.Op3 _op3 = (hardtyped.Absyn.Op3) foo;
       if (_i_ > 0) render(_L_PAREN);
       render(">");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Op4)
    {
       hardtyped.Absyn.Op4 _op4 = (hardtyped.Absyn.Op4) foo;
       if (_i_ > 0) render(_L_PAREN);
       render(">=");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Op5)
    {
       hardtyped.Absyn.Op5 _op5 = (hardtyped.Absyn.Op5) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("==");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Op6)
    {
       hardtyped.Absyn.Op6 _op6 = (hardtyped.Absyn.Op6) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("!=");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.PlusMinus foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.PlusMinus1)
    {
       hardtyped.Absyn.PlusMinus1 _plusminus1 = (hardtyped.Absyn.PlusMinus1) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("+");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.PlusMinus2)
    {
       hardtyped.Absyn.PlusMinus2 _plusminus2 = (hardtyped.Absyn.PlusMinus2) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("-");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.MultDiv foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.MultDiv1)
    {
       hardtyped.Absyn.MultDiv1 _multdiv1 = (hardtyped.Absyn.MultDiv1) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("*");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.MultDiv2)
    {
       hardtyped.Absyn.MultDiv2 _multdiv2 = (hardtyped.Absyn.MultDiv2) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("/");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.UnaryDef foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.UnaryDefLiteral)
    {
       hardtyped.Absyn.UnaryDefLiteral _unarydefliteral = (hardtyped.Absyn.UnaryDefLiteral) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_unarydefliteral.literal_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.UnaryDefIdent)
    {
       hardtyped.Absyn.UnaryDefIdent _unarydefident = (hardtyped.Absyn.UnaryDefIdent) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_unarydefident.ident_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.ListFuncParameter foo, int _i_)
  {
    ppListFuncParameter(foo.iterator(), _i_);
  }

  private static void ppListFuncParameter(java.util.Iterator<hardtyped.Absyn.FuncParameter> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      hardtyped.Absyn.FuncParameter el = it.next();
      pp(el, _i_); render("."); ppListFuncParameter(it, _i_);
    }
  }


  private static void pp(hardtyped.Absyn.FuncParameter foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.FuncParameter1)
    {
       hardtyped.Absyn.FuncParameter1 _funcparameter1 = (hardtyped.Absyn.FuncParameter1) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_funcparameter1.ident_, 0);
       render(":");
       pp(_funcparameter1.type_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.FuncBody foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.FuncBody1)
    {
       hardtyped.Absyn.FuncBody1 _funcbody1 = (hardtyped.Absyn.FuncBody1) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       pp(_funcbody1.listexpr_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.Literal foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.IntegerLiteral)
    {
       hardtyped.Absyn.IntegerLiteral _integerliteral = (hardtyped.Absyn.IntegerLiteral) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_integerliteral.integer_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.UnitLiteral)
    {
       hardtyped.Absyn.UnitLiteral _unitliteral = (hardtyped.Absyn.UnitLiteral) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("unit");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.BooleanLiteral_true)
    {
       hardtyped.Absyn.BooleanLiteral_true _booleanliteral_true = (hardtyped.Absyn.BooleanLiteral_true) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("true");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.BooleanLiteral_false)
    {
       hardtyped.Absyn.BooleanLiteral_false _booleanliteral_false = (hardtyped.Absyn.BooleanLiteral_false) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("false");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.StringLiteral)
    {
       hardtyped.Absyn.StringLiteral _stringliteral = (hardtyped.Absyn.StringLiteral) foo;
       if (_i_ > 0) render(_L_PAREN);
       printQuoted(_stringliteral.string_);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.RealLiteral)
    {
       hardtyped.Absyn.RealLiteral _realliteral = (hardtyped.Absyn.RealLiteral) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_realliteral.double_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(hardtyped.Absyn.Type foo, int _i_)
  {
    if (foo instanceof hardtyped.Absyn.Int)
    {
       hardtyped.Absyn.Int _int = (hardtyped.Absyn.Int) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("Int");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Real)
    {
       hardtyped.Absyn.Real _real = (hardtyped.Absyn.Real) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("Real");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Str)
    {
       hardtyped.Absyn.Str _str = (hardtyped.Absyn.Str) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("Str");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Boolean)
    {
       hardtyped.Absyn.Boolean _boolean = (hardtyped.Absyn.Boolean) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("Boolean");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.Unit)
    {
       hardtyped.Absyn.Unit _unit = (hardtyped.Absyn.Unit) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("Unit");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof hardtyped.Absyn.FunctionType)
    {
       hardtyped.Absyn.FunctionType _functiontype = (hardtyped.Absyn.FunctionType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_functiontype.type_1, 0);
       render("->");
       pp(_functiontype.type_2, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }


  private static void sh(hardtyped.Absyn.Program foo)
  {
    if (foo instanceof hardtyped.Absyn.Progr)
    {
       hardtyped.Absyn.Progr _progr = (hardtyped.Absyn.Progr) foo;
       render("(");
       render("Progr");
       render("[");
       sh(_progr.listimport_);
       render("]");
       render("[");
       sh(_progr.listexpr_);
       render("]");
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.ListImport foo)
  {
     for (java.util.Iterator<hardtyped.Absyn.Import> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(hardtyped.Absyn.ListExpr foo)
  {
     for (java.util.Iterator<hardtyped.Absyn.Expr> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(hardtyped.Absyn.Import foo)
  {
    if (foo instanceof hardtyped.Absyn.ImportAs)
    {
       hardtyped.Absyn.ImportAs _importas = (hardtyped.Absyn.ImportAs) foo;
       render("(");
       render("ImportAs");
       sh(_importas.string_);
       sh(_importas.ident_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.ImportPlain)
    {
       hardtyped.Absyn.ImportPlain _importplain = (hardtyped.Absyn.ImportPlain) foo;
       render("(");
       render("ImportPlain");
       sh(_importplain.string_);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.Expr foo)
  {
    if (foo instanceof hardtyped.Absyn.If)
    {
       hardtyped.Absyn.If _if = (hardtyped.Absyn.If) foo;
       render("(");
       render("If");
       render("[");
       sh(_if.listifcase_);
       render("]");
       sh(_if.elsecase_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Let1)
    {
       hardtyped.Absyn.Let1 _let1 = (hardtyped.Absyn.Let1) foo;
       render("(");
       render("Let1");
       sh(_let1.lethead_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Let2)
    {
       hardtyped.Absyn.Let2 _let2 = (hardtyped.Absyn.Let2) foo;
       render("(");
       render("Let2");
       sh(_let2.lethead_);
       sh(_let2.expr_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Function)
    {
       hardtyped.Absyn.Function _function = (hardtyped.Absyn.Function) foo;
       render("(");
       render("Function");
       render("[");
       sh(_function.listfuncparameter_);
       render("]");
       sh(_function.funcbody_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Disjunction)
    {
       hardtyped.Absyn.Disjunction _disjunction = (hardtyped.Absyn.Disjunction) foo;
       render("(");
       render("Disjunction");
       sh(_disjunction.expr_1);
       sh(_disjunction.expr_2);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Conjunction)
    {
       hardtyped.Absyn.Conjunction _conjunction = (hardtyped.Absyn.Conjunction) foo;
       render("(");
       render("Conjunction");
       sh(_conjunction.expr_1);
       sh(_conjunction.expr_2);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Relation)
    {
       hardtyped.Absyn.Relation _relation = (hardtyped.Absyn.Relation) foo;
       render("(");
       render("Relation");
       sh(_relation.expr_1);
       sh(_relation.op_);
       sh(_relation.expr_2);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Factor)
    {
       hardtyped.Absyn.Factor _factor = (hardtyped.Absyn.Factor) foo;
       render("(");
       render("Factor");
       sh(_factor.expr_1);
       sh(_factor.plusminus_);
       sh(_factor.expr_2);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Term)
    {
       hardtyped.Absyn.Term _term = (hardtyped.Absyn.Term) foo;
       render("(");
       render("Term");
       sh(_term.expr_1);
       sh(_term.multdiv_);
       sh(_term.expr_2);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.Unary)
    {
       hardtyped.Absyn.Unary _unary = (hardtyped.Absyn.Unary) foo;
       render("(");
       render("Unary");
       sh(_unary.unarydef_);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.ListIfCase foo)
  {
     for (java.util.Iterator<hardtyped.Absyn.IfCase> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(hardtyped.Absyn.IfCase foo)
  {
    if (foo instanceof hardtyped.Absyn.IfCase1)
    {
       hardtyped.Absyn.IfCase1 _ifcase1 = (hardtyped.Absyn.IfCase1) foo;
       render("(");
       render("IfCase1");
       sh(_ifcase1.expr_1);
       sh(_ifcase1.expr_2);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.ElseCase foo)
  {
    if (foo instanceof hardtyped.Absyn.ElseCase1)
    {
       hardtyped.Absyn.ElseCase1 _elsecase1 = (hardtyped.Absyn.ElseCase1) foo;
       render("(");
       render("ElseCase1");
       sh(_elsecase1.expr_);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.LetHead foo)
  {
    if (foo instanceof hardtyped.Absyn.LetHeadPlain)
    {
       hardtyped.Absyn.LetHeadPlain _letheadplain = (hardtyped.Absyn.LetHeadPlain) foo;
       render("(");
       render("LetHeadPlain");
       sh(_letheadplain.ident_);
       sh(_letheadplain.expr_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.LetrecHead)
    {
       hardtyped.Absyn.LetrecHead _letrechead = (hardtyped.Absyn.LetrecHead) foo;
       render("(");
       render("LetrecHead");
       sh(_letrechead.ident_);
       sh(_letrechead.expr_);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.Op foo)
  {
    if (foo instanceof hardtyped.Absyn.Op1)
    {
       hardtyped.Absyn.Op1 _op1 = (hardtyped.Absyn.Op1) foo;
       render("Op1");
    }
    if (foo instanceof hardtyped.Absyn.Op2)
    {
       hardtyped.Absyn.Op2 _op2 = (hardtyped.Absyn.Op2) foo;
       render("Op2");
    }
    if (foo instanceof hardtyped.Absyn.Op3)
    {
       hardtyped.Absyn.Op3 _op3 = (hardtyped.Absyn.Op3) foo;
       render("Op3");
    }
    if (foo instanceof hardtyped.Absyn.Op4)
    {
       hardtyped.Absyn.Op4 _op4 = (hardtyped.Absyn.Op4) foo;
       render("Op4");
    }
    if (foo instanceof hardtyped.Absyn.Op5)
    {
       hardtyped.Absyn.Op5 _op5 = (hardtyped.Absyn.Op5) foo;
       render("Op5");
    }
    if (foo instanceof hardtyped.Absyn.Op6)
    {
       hardtyped.Absyn.Op6 _op6 = (hardtyped.Absyn.Op6) foo;
       render("Op6");
    }
  }

  private static void sh(hardtyped.Absyn.PlusMinus foo)
  {
    if (foo instanceof hardtyped.Absyn.PlusMinus1)
    {
       hardtyped.Absyn.PlusMinus1 _plusminus1 = (hardtyped.Absyn.PlusMinus1) foo;
       render("PlusMinus1");
    }
    if (foo instanceof hardtyped.Absyn.PlusMinus2)
    {
       hardtyped.Absyn.PlusMinus2 _plusminus2 = (hardtyped.Absyn.PlusMinus2) foo;
       render("PlusMinus2");
    }
  }

  private static void sh(hardtyped.Absyn.MultDiv foo)
  {
    if (foo instanceof hardtyped.Absyn.MultDiv1)
    {
       hardtyped.Absyn.MultDiv1 _multdiv1 = (hardtyped.Absyn.MultDiv1) foo;
       render("MultDiv1");
    }
    if (foo instanceof hardtyped.Absyn.MultDiv2)
    {
       hardtyped.Absyn.MultDiv2 _multdiv2 = (hardtyped.Absyn.MultDiv2) foo;
       render("MultDiv2");
    }
  }

  private static void sh(hardtyped.Absyn.UnaryDef foo)
  {
    if (foo instanceof hardtyped.Absyn.UnaryDefLiteral)
    {
       hardtyped.Absyn.UnaryDefLiteral _unarydefliteral = (hardtyped.Absyn.UnaryDefLiteral) foo;
       render("(");
       render("UnaryDefLiteral");
       sh(_unarydefliteral.literal_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.UnaryDefIdent)
    {
       hardtyped.Absyn.UnaryDefIdent _unarydefident = (hardtyped.Absyn.UnaryDefIdent) foo;
       render("(");
       render("UnaryDefIdent");
       sh(_unarydefident.ident_);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.ListFuncParameter foo)
  {
     for (java.util.Iterator<hardtyped.Absyn.FuncParameter> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(hardtyped.Absyn.FuncParameter foo)
  {
    if (foo instanceof hardtyped.Absyn.FuncParameter1)
    {
       hardtyped.Absyn.FuncParameter1 _funcparameter1 = (hardtyped.Absyn.FuncParameter1) foo;
       render("(");
       render("FuncParameter1");
       sh(_funcparameter1.ident_);
       sh(_funcparameter1.type_);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.FuncBody foo)
  {
    if (foo instanceof hardtyped.Absyn.FuncBody1)
    {
       hardtyped.Absyn.FuncBody1 _funcbody1 = (hardtyped.Absyn.FuncBody1) foo;
       render("(");
       render("FuncBody1");
       render("[");
       sh(_funcbody1.listexpr_);
       render("]");
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.Literal foo)
  {
    if (foo instanceof hardtyped.Absyn.IntegerLiteral)
    {
       hardtyped.Absyn.IntegerLiteral _integerliteral = (hardtyped.Absyn.IntegerLiteral) foo;
       render("(");
       render("IntegerLiteral");
       sh(_integerliteral.integer_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.UnitLiteral)
    {
       hardtyped.Absyn.UnitLiteral _unitliteral = (hardtyped.Absyn.UnitLiteral) foo;
       render("UnitLiteral");
    }
    if (foo instanceof hardtyped.Absyn.BooleanLiteral_true)
    {
       hardtyped.Absyn.BooleanLiteral_true _booleanliteral_true = (hardtyped.Absyn.BooleanLiteral_true) foo;
       render("BooleanLiteral_true");
    }
    if (foo instanceof hardtyped.Absyn.BooleanLiteral_false)
    {
       hardtyped.Absyn.BooleanLiteral_false _booleanliteral_false = (hardtyped.Absyn.BooleanLiteral_false) foo;
       render("BooleanLiteral_false");
    }
    if (foo instanceof hardtyped.Absyn.StringLiteral)
    {
       hardtyped.Absyn.StringLiteral _stringliteral = (hardtyped.Absyn.StringLiteral) foo;
       render("(");
       render("StringLiteral");
       sh(_stringliteral.string_);
       render(")");
    }
    if (foo instanceof hardtyped.Absyn.RealLiteral)
    {
       hardtyped.Absyn.RealLiteral _realliteral = (hardtyped.Absyn.RealLiteral) foo;
       render("(");
       render("RealLiteral");
       sh(_realliteral.double_);
       render(")");
    }
  }

  private static void sh(hardtyped.Absyn.Type foo)
  {
    if (foo instanceof hardtyped.Absyn.Int)
    {
       hardtyped.Absyn.Int _int = (hardtyped.Absyn.Int) foo;
       render("Int");
    }
    if (foo instanceof hardtyped.Absyn.Real)
    {
       hardtyped.Absyn.Real _real = (hardtyped.Absyn.Real) foo;
       render("Real");
    }
    if (foo instanceof hardtyped.Absyn.Str)
    {
       hardtyped.Absyn.Str _str = (hardtyped.Absyn.Str) foo;
       render("Str");
    }
    if (foo instanceof hardtyped.Absyn.Boolean)
    {
       hardtyped.Absyn.Boolean _boolean = (hardtyped.Absyn.Boolean) foo;
       render("Boolean");
    }
    if (foo instanceof hardtyped.Absyn.Unit)
    {
       hardtyped.Absyn.Unit _unit = (hardtyped.Absyn.Unit) foo;
       render("Unit");
    }
    if (foo instanceof hardtyped.Absyn.FunctionType)
    {
       hardtyped.Absyn.FunctionType _functiontype = (hardtyped.Absyn.FunctionType) foo;
       render("(");
       render("FunctionType");
       sh(_functiontype.type_1);
       sh(_functiontype.type_2);
       render(")");
    }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + c.toString() + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + c.toString() + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + s + "\""); }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}

