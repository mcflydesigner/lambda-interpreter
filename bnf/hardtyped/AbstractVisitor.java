// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;

/** Abstract Visitor */

public class AbstractVisitor<R,A> implements AllVisitor<R,A> {
    /* Program */
    public R visit(hardtyped.Absyn.Progr p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Program p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Stm */
    public R visit(hardtyped.Absyn.ImportAs p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.ImportPlain p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.If p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Let p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Letrec p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Stm p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* IfStart */
    public R visit(hardtyped.Absyn.IfStart1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.IfStart p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Else */
    public R visit(hardtyped.Absyn.Else1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Else p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Body */
    public R visit(hardtyped.Absyn.Body1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Body p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Expression */
    public R visit(hardtyped.Absyn.Expression1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Expression2 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Expression p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Conjunction */
    public R visit(hardtyped.Absyn.Conjunction1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Conjunction p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Relation */
    public R visit(hardtyped.Absyn.Relation1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Relation2 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Relation p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Factor */
    public R visit(hardtyped.Absyn.Factor1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Factor2 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Factor p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Term */
    public R visit(hardtyped.Absyn.Term1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Term2 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Term p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Unary */
    public R visit(hardtyped.Absyn.Unary1 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Unary2 p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Unary3 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Unary p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Ascription */
    public R visit(hardtyped.Absyn.Ascription1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Ascription p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Literal */
    public R visit(hardtyped.Absyn.ArrayLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.FunctionLiteral p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.RecordLiteral p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Literal p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* RecordElement */
    public R visit(hardtyped.Absyn.RecordElement1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.RecordElement p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* FunctionParameters */
    public R visit(hardtyped.Absyn.FunctionParameters1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.FunctionParameters p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* FunctionBody */
    public R visit(hardtyped.Absyn.FunctionBody1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.FunctionBody p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Identifier */
    public R visit(hardtyped.Absyn.Identifier1 p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Identifier p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Type */
    public R visit(hardtyped.Absyn.Int p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Real p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.String p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Boolean p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Unit p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.FunctionTypeIndicator p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Type p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Operand */
    public R visit(hardtyped.Absyn.Less p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.LessEql p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.More p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.MoreEql p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Eql p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.NotEql p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.Operand p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* PlusMinus */
    public R visit(hardtyped.Absyn.Plus p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Minus p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.PlusMinus p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* MultDiv */
    public R visit(hardtyped.Absyn.Mult p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.Div p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.MultDiv p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* UnaryPrefix */
    public R visit(hardtyped.Absyn.PlusPfx p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.MinusPfx p, A arg) { return visitDefault(p, arg); }
    public R visit(hardtyped.Absyn.NotPfx p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(hardtyped.Absyn.UnaryPrefix p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }

}
