// File generated by the BNF Converter (bnfc 2.9.4).

package hardtyped;

/*** Visitor Design Pattern Skeleton. ***/

/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use.
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class ProgramVisitor<R,A> implements hardtyped.Absyn.Program.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.Progr p, A arg)
    { /* Code for Progr goes here */
      for (hardtyped.Absyn.Import x: p.listimport_) {
        x.accept(new ImportVisitor<R,A>(), arg);
      }
      for (hardtyped.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class ImportVisitor<R,A> implements hardtyped.Absyn.Import.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.ImportAs p, A arg)
    { /* Code for ImportAs goes here */
      //p.string_;
      //p.ident_;
      return null;
    }
    public R visit(hardtyped.Absyn.ImportPlain p, A arg)
    { /* Code for ImportPlain goes here */
      //p.string_;
      return null;
    }
  }
  public class ExprVisitor<R,A> implements hardtyped.Absyn.Expr.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.If p, A arg)
    { /* Code for If goes here */
      for (hardtyped.Absyn.IfCase x: p.listifcase_) {
        x.accept(new IfCaseVisitor<R,A>(), arg);
      }
      p.elsecase_.accept(new ElseCaseVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Let1 p, A arg)
    { /* Code for Let1 goes here */
      p.lethead_.accept(new LetHeadVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Let2 p, A arg)
    { /* Code for Let2 goes here */
      p.lethead_.accept(new LetHeadVisitor<R,A>(), arg);
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Function p, A arg)
    { /* Code for Function goes here */
      for (hardtyped.Absyn.FuncParameter x: p.listfuncparameter_) {
        x.accept(new FuncParameterVisitor<R,A>(), arg);
      }
      p.funcbody_.accept(new FuncBodyVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Disjunction p, A arg)
    { /* Code for Disjunction goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Conjunction p, A arg)
    { /* Code for Conjunction goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Relation p, A arg)
    { /* Code for Relation goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.op_.accept(new OpVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Factor p, A arg)
    { /* Code for Factor goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.plusminus_.accept(new PlusMinusVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Term p, A arg)
    { /* Code for Term goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.multdiv_.accept(new MultDivVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.Unary p, A arg)
    { /* Code for Unary goes here */
      p.unarydef_.accept(new UnaryDefVisitor<R,A>(), arg);
      return null;
    }
  }
  public class IfCaseVisitor<R,A> implements hardtyped.Absyn.IfCase.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.IfCase1 p, A arg)
    { /* Code for IfCase1 goes here */
      p.expr_1.accept(new ExprVisitor<R,A>(), arg);
      p.expr_2.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ElseCaseVisitor<R,A> implements hardtyped.Absyn.ElseCase.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.ElseCase1 p, A arg)
    { /* Code for ElseCase1 goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class LetHeadVisitor<R,A> implements hardtyped.Absyn.LetHead.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.LetHeadPlain p, A arg)
    { /* Code for LetHeadPlain goes here */
      //p.ident_;
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.LetrecHead p, A arg)
    { /* Code for LetrecHead goes here */
      //p.ident_;
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
  }
  public class OpVisitor<R,A> implements hardtyped.Absyn.Op.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.Op1 p, A arg)
    { /* Code for Op1 goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Op2 p, A arg)
    { /* Code for Op2 goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Op3 p, A arg)
    { /* Code for Op3 goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Op4 p, A arg)
    { /* Code for Op4 goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Op5 p, A arg)
    { /* Code for Op5 goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Op6 p, A arg)
    { /* Code for Op6 goes here */
      return null;
    }
  }
  public class PlusMinusVisitor<R,A> implements hardtyped.Absyn.PlusMinus.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.PlusMinus1 p, A arg)
    { /* Code for PlusMinus1 goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.PlusMinus2 p, A arg)
    { /* Code for PlusMinus2 goes here */
      return null;
    }
  }
  public class MultDivVisitor<R,A> implements hardtyped.Absyn.MultDiv.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.MultDiv1 p, A arg)
    { /* Code for MultDiv1 goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.MultDiv2 p, A arg)
    { /* Code for MultDiv2 goes here */
      return null;
    }
  }
  public class UnaryDefVisitor<R,A> implements hardtyped.Absyn.UnaryDef.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.UnaryDefLiteral p, A arg)
    { /* Code for UnaryDefLiteral goes here */
      p.literal_.accept(new LiteralVisitor<R,A>(), arg);
      return null;
    }
    public R visit(hardtyped.Absyn.UnaryDefIdent p, A arg)
    { /* Code for UnaryDefIdent goes here */
      //p.ident_;
      return null;
    }
  }
  public class FuncParameterVisitor<R,A> implements hardtyped.Absyn.FuncParameter.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.FuncParameter1 p, A arg)
    { /* Code for FuncParameter1 goes here */
      //p.ident_;
      p.type_.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
  }
  public class FuncBodyVisitor<R,A> implements hardtyped.Absyn.FuncBody.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.FuncBody1 p, A arg)
    { /* Code for FuncBody1 goes here */
      for (hardtyped.Absyn.Expr x: p.listexpr_) {
        x.accept(new ExprVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class LiteralVisitor<R,A> implements hardtyped.Absyn.Literal.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.IntegerLiteral p, A arg)
    { /* Code for IntegerLiteral goes here */
      //p.integer_;
      return null;
    }
    public R visit(hardtyped.Absyn.UnitLiteral p, A arg)
    { /* Code for UnitLiteral goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.BooleanLiteral_true p, A arg)
    { /* Code for BooleanLiteral_true goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.BooleanLiteral_false p, A arg)
    { /* Code for BooleanLiteral_false goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.StringLiteral p, A arg)
    { /* Code for StringLiteral goes here */
      //p.string_;
      return null;
    }
    public R visit(hardtyped.Absyn.RealLiteral p, A arg)
    { /* Code for RealLiteral goes here */
      //p.double_;
      return null;
    }
  }
  public class TypeVisitor<R,A> implements hardtyped.Absyn.Type.Visitor<R,A>
  {
    public R visit(hardtyped.Absyn.Int p, A arg)
    { /* Code for Int goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Real p, A arg)
    { /* Code for Real goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Str p, A arg)
    { /* Code for Str goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Boolean p, A arg)
    { /* Code for Boolean goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.Unit p, A arg)
    { /* Code for Unit goes here */
      return null;
    }
    public R visit(hardtyped.Absyn.FunctionType p, A arg)
    { /* Code for FunctionType goes here */
      p.type_1.accept(new TypeVisitor<R,A>(), arg);
      p.type_2.accept(new TypeVisitor<R,A>(), arg);
      return null;
    }
  }
}
